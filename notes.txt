public contract methods
================
constructor
createJob(numberOfJobs, totalWorkRequired) payable
contribute(address, numberOfWorks)
destroy(address)

contract notes
===============
may be a good idea to separate the logic of paying workers
making a splitter contract that saves off worker's balances and requires them to get them would be good, but it means that workers would need existing funds to send the transaction getting those wages
    -could do a system where if any user wants to pay the gas, they can pay everyone out
    -could do a round robin system where each completed job pays out one person and everyone else's gets banked
at gas limit 4712388 without a splitter contract, we are able to pay out about 217 workers.
when users visit the site, we can react to if they have web3. This pattern may require splitting the contract into multiple contracts
    -if no web3, they contribute to the automatic payout contract. This contract means payouts happen automatically with automated gas levels
    -if web3, they get to 1. see their progress and balance in real time by inspecting the blockchain and 2. Withdraw their money as frequently or infrequently as possible

server lib
=================
Currently, the server is paying the gas fee for every transaction
    -This means that any user that gives contributions to a contract that has a fallback function that consumes gas can exert extra gas from the server.
        -it could also cause an exception and stop paying everyone
    -This means we could also be attacked by a user splitting all of his contributions across many accounts

public rest endpoints
===============
GET /job
    -returns {seed, controller, jobId}
GET /jobBytecode/{jobId}
    -returns 0xbytecodez
POST /result/{jobId}
    -header: ethAddress
    -postBody {fitness, workCredits, seed}

problems
===============
I encountered many problems while developing. Many of these may have been due to me not fully understanding truffle
    -an incorrect number of parameters on a function in my code is thrown as an incorrect number of solidity
        -one time I called newBounty with the wrong number of arguments. It threw  Error: Invalid number of arguments to Solidity function. It was wrong in my js code, having nothing to do with solidity. File a bug
    -knowing what gasLimit to put
We had to constantly think of attack vectors.
Thinking in a decentralized fashion. We had many long conversations about how certain things could be implemented
    -Knowing how to pay out users properly
Knowing when to have things on chain vs off chain

client
==========
Need to keep wasm in source control
Need to give extra memory to the wasm module
Need to use that extra memory in the wasm module
Need a reset so that the data structures in the wasm module can be reused for new controllers



why is the berry never at 1?
incorporate berry distance into algo
we should make sure our fitness proportional works
